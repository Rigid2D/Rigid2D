# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../../gtest

# Where to find source code relative to this file.
SRC_DIR = ../

# Where to find test code relative to this file.
TEST_DIR =

# Root of Rigid2D folder
ROOT_DIR = ../../../

INCLUDE_DIR = ../../

COMMON_DIR = ../../Common/

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include 	\
						-I$(ROOT_DIR)  					\
						-I$(SRC_DIR) 						\
						-I$(INCLUDE_DIR) 				\
						-I$(COMMON_DIR)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -std=c++0x

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = RigidBody-UnitTest \

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Standard commands to compile object file
COMPILE = $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c

# Standard commands to link object files and create executable
LINK = $(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
feq.o : $(COMMON_DIR)feq.cpp $(COMMON_DIR)feq.h
	$(COMPILE) $(COMMON_DIR)feq.cpp

RigidException.o : $(COMMON_DIR)RigidException.cpp $(COMMON_DIR)RigidException.h
	$(COMPILE) $(COMMON_DIR)RigidException.cpp

MathUtils.o : $(COMMON_DIR)MathUtils.cpp $(COMMON_DIR)MathUtils.h $(COMMON_DIR)Vector2.h \
							$(COMMON_DIR)feq.h $(COMMON_DIR)RigidException.h
	$(COMPILE) $(COMMON_DIR)MathUtils.cpp

RBSolver.o : $(SRC_DIR)RBSolver.h $(SRC_DIR)RBSolver.cpp $(SRC_DIR)RigidBody.h
	$(COMPILE) $(SRC_DIR)RBSolver.cpp

AABB.o : $(SRC_DIR)AABB.cpp $(SRC_DIR)AABB.h $(COMMON_DIR)Vector2.h \
				 $(COMMON_DIR)RigidSettings.h
	$(COMPILE) $(SRC_DIR)AABB.cpp

RigidBody.o : $(SRC_DIR)RigidBody.h $(SRC_DIR)RigidBody.cpp \
							$(COMMON_DIR)RigidSettings.h $(COMMON_DIR)MathUtils.h \
							$(SRC_DIR)Force.h $(COMMON_DIR)Vector2.h $(SRC_DIR)RBSolver.h \
							$(SRC_DIR)AABB.h
	$(COMPILE) $(SRC_DIR)RigidBody.cpp

RigidBody-UnitTest.o : $(SRC_DIR)RigidBody.h RigidBody-UnitTest.cpp $(GTEST_HEADERS)
	$(COMPILE) RigidBody-UnitTest.cpp

RigidBody-UnitTest : RigidBody-UnitTest.o RigidBody.o Force.o RBSolver.o \
										 RigidException.o feq.o MathUtils.o AABB.o gtest_main.a
	$(LINK)

Force.o : $(SRC_DIR)Force.h $(SRC_DIR)Force.cpp
	$(COMPILE) $(SRC_DIR)Force.cpp

RigidBodySystem.o : $(SRC_DIR)RigidBodySystem.h $(SRC_DIR)RigidBodySystem.cpp  \
										$(SRC_DIR)RigidBody.h $(COMMON_DIR)RigidException.h
	$(COMPILE) $(SRC_DIR)RigidBodySystem.cpp

