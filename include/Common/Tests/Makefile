# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../../gtest

# Where to find source code relative to this file.
COMMON_DIR = ../

# Where to find test code relative to this file
TEST_DIR =

# Root of Rigid2D folder
ROOT_DIR = ../../../

INCLUDE_DIR = $(ROOT_DIR)include/

# Flags passed to the preprocessor.
CPPFLAGS += -I$(ROOT_DIR)gtest/include \
						-I$(INCLUDE_DIR) \
						-I$(COMMON_DIR) \

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -std=c++0x

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = Matrix2-UnitTest \
				RigidException-UnitTest \
        Vector3-UnitTest \
        Vector2-UnitTest \

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Standard commands to compile object file
COMPILE = $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c

# Standard commands to link object files and create executable
LINK = $(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o *.gch

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

feq.o : $(COMMON_DIR)feq.cpp $(COMMON_DIR)feq.h
	$(COMPILE) $(COMMON_DIR)feq.cpp

Matrix2.h : $(COMMON_DIR)RigidSettings.h $(COMMON_DIR)feq.h

Matrix2.o : $(COMMON_DIR)Matrix2.cpp $(COMMON_DIR)Matrix2.h $(GTEST_HEADERS)
	$(COMPILE) $(COMMON_DIR)Matrix2.cpp

Matrix2-UnitTest.o : $(TEST_DIR)Matrix2-UnitTest.cpp $(COMMON_DIR)Matrix2.h $(GTEST_HEADERS)
	$(COMPILE) $(TEST_DIR)Matrix2-UnitTest.cpp

Matrix2-UnitTest : Matrix2.o Matrix2-UnitTest.o feq.o gtest_main.a
	$(LINK)

RigidException.o : $(COMMON_DIR)RigidException.cpp $(COMMON_DIR)RigidException.h $(GTEST_HEADERS)
	$(COMPILE) $(COMMON_DIR)RigidException.cpp

RigidException-UnitTest.o : $(TEST_DIR)RigidException-UnitTest.cpp \
                     $(COMMON_DIR)RigidException.h $(GTEST_HEADERS)
	$(COMPILE) $(TEST_DIR)RigidException-UnitTest.cpp

RigidException-UnitTest : RigidException-UnitTest.o RigidException.o gtest_main.a
	$(LINK)

Vector3.h : $(COMMON_DIR)RigidSettings.h $(COMMON_DIR)feq.h

Vector3-UnitTest.o : $(TEST_DIR)Vector3-UnitTest.cpp $(COMMON_DIR)Vector3.h $(GTEST_HEADERS)
	$(COMPILE) $(TEST_DIR)Vector3-UnitTest.cpp

Vector3-UnitTest : Vector3-UnitTest.o feq.o gtest_main.a
	$(LINK)

Vector2.h : $(COMMON_DIR)RigidSettings.h $(COMMON_DIR)feq.h

Vector2-UnitTest.o : $(TEST_DIR)Vector2-UnitTest.cpp $(COMMON_DIR)Vector2.h $(GTEST_HEADERS)
	$(COMPILE) $(TEST_DIR)Vector2-UnitTest.cpp

Vector2-UnitTest : Vector2-UnitTest.o feq.o gtest_main.a
	$(LINK)

ForceFunctions.h : $(COMMON_DIR)RigidSettings.h

ForceFunctions.o : ForceFunctions.cpp ForceFunctions.h
	$(COMPILE) ForceFunctions.cpp
